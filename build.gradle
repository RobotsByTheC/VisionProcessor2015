import org.gradle.internal.os.OperatingSystem;

buildscript {
  repositories {
	mavenCentral()
  }
  dependencies {
    classpath 'com.google.gradle:osdetector-gradle-plugin:1.4.0'
  }
}

repositories {
  maven {
    url "${System.getProperty('user.home')}/releases/maven/development"
  }
  maven {
	url = "http://first.wpi.edu/FRC/roborio/maven/release"
  }
  mavenCentral()
}

apply plugin: 'com.google.osdetector'
apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'cpp'

def java_home = System.properties['java.home']

def cudaPath = "/usr/local/cuda/"
def useCuda = file(cudaPath).exists()

model {
	repositories {
		libs(PrebuiltLibraries) {
			def opencvIncludeDir = "lib/opencv/include"
    
    		def staticLibExtension = osdetector.os == "windows" ? "lib" : "a"
    		def opencvLibPath = "lib/opencv/${osdetector.os}/${osdetector.arch}"
    
			opencv_imgproc {
				headers.srcDir opencvIncludeDir
				binaries.withType(StaticLibraryBinary){
					staticLibraryFile = file("${opencvLibPath}/libopencv_imgproc.${staticLibExtension}")
				}
			}
			opencv_core {
				headers.srcDir opencvIncludeDir
				binaries.withType(StaticLibraryBinary){
					staticLibraryFile = file("${opencvLibPath}/libopencv_core.${staticLibExtension}")
				}
			}
			opencv_cudaimgproc {
				headers.srcDir opencvIncludeDir
				binaries.withType(StaticLibraryBinary){
					staticLibraryFile = file("${opencvLibPath}/libopencv_cudaimgproc.${staticLibExtension}")
				}
			}
			opencv_cudafilters {
				headers.srcDir opencvIncludeDir
				binaries.withType(StaticLibraryBinary){
					staticLibraryFile = file("${opencvLibPath}/libopencv_cudafilters.${staticLibExtension}")
				}
			}
			
			
			if (useCuda) {
				cudart {
					binaries.withType(StaticLibraryBinary){
						staticLibraryFile = file("${cudaPath}/lib/libcudart_static.${staticLibExtension}")
					}
				}
				nppi {
					binaries.withType(StaticLibraryBinary){
						staticLibraryFile = file("${cudaPath}/lib/libnppi_static.${staticLibExtension}")
					}
				}
			}
     
			jni {
				headers.srcDir java_home + "/../include"
				if (osdetector.os == "osx") {
					headers.srcDir "$java_home/../include/darwin"
				} else if (osdetector.os == "linux") {
					headers.srcDir "$java_home/../include/linux"
				}     	
			}
		}
	}
  
  toolChains {
        gcc(Gcc) {
            target("armv7")
        }
    }
    platforms {
        armv7 {
            architecture "arm-v7"
        }
    }

  components {
    gpuvision(NativeLibrarySpec) {
            sources {            
                cpp.lib library: 'jni', linkage: 'api'
                cpp {
                    source {
                        srcDir 'src/main/jni'
                        //include "**/*.cpp"
                    }
                    lib library: 'opencv_imgproc', linkage: 'static'
                    lib library: 'opencv_cudaimgproc', linkage: 'static'
                    lib library: 'opencv_cudafilters', linkage: 'static'
                    lib library: 'opencv_core', linkage: 'static'
                    if (useCuda) {
                    	lib library: 'cudart', linkage: 'static'
                    	lib library: 'nppi', linkage: 'static'
                    }
                    
                }
            }
            buildTypes {
                release
            }
            targetPlatform "armv7"
        }
    }
        
    tasks {
    	copyLibGpuvision(Copy) {
    		dependsOn $.tasks.gpuvisionSharedLibrary
    	
    		from $.binaries.gpuvisionSharedLibrary.getSharedLibraryFile()
    		into 'lib/gpuvision'
		}
		jar {
			dependsOn $.tasks.copyLibGpuvision
			from configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
		}
    }
}

task nativeHeaders(dependsOn: ':classes') {
    inputs.files sourceSets.main.output
    outputs.dir "src/main/jni"
    exec {
		executable org.gradle.internal.jvm.Jvm.current().getExecutable('javah')
        args '-d', "src/main/jni"
        args '-classpath', "build/libs/VisionProcessor2016.jar"
		args 'org.usfirst.frc.team2084.CMonster2016.vision.HighGoalProcessor'
	}
}

javadoc {
	failOnError false
}

// This should not be changed without notifying everybody
String opencvVersion = "3.1.0"
String opencvCode = opencvVersion.replace(".", "")

dependencies {
	compile files('lib/opencv-310.jar')
	String ntType = "desktop"
	if (osdetector.arch.contains("arm")) {
		ntType = "arm"
	}
	compile 'org.nanohttpd:nanohttpd:+'
	compile 'com.fazecast:jSerialComm:+'
	compileOnly 'edu.wpi.first.wpilib.networktables.java:NetworkTables:3.+:' + ntType
}


